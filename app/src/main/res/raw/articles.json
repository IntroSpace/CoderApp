{
    "id": [
        1, 2, 3
    ],
    "names": [
        "Основы программирования",
        "Подробнее про синтаксис Avenue",
        "Основы серверной части, сети"
    ],
    "futureNames": [
        "*ИИ, машиное обучение*",
        "Практика",
        "Закрепление всего изученного"
    ],
    "articles": {
        "1": {
            "1": "Знакомство с программированием",
            "2": "Начало всех начал",
            "3": "Переменные",
            "4": "Арифметические операции",
            "5": "Использование функций"
        },
        "2": {
            "1": "Логические выражения",
            "2": "Условные операторы",
            "3": "Циклы while, do while",
            "4": "Операторы break, continue",
            "5": "Цикл for",
            "6": "Массивы",
            "7": "Создание своих функций"
        },
        "3": {
            "1": "Об интернете",
            "2": "Адресация в IP-сетях",
            "3": "Пишем свой небольшой сервер",
            "4": "Функции в PHP",
            "5": "Запуск сервера"
        }
    },
    "text": [
        [	"Для того чтобы увидеть результат программы, пусть даже самой простой, нужно:\n<code>\t1) Написать программу. Для этого нужно владеть языком программирования (мы будем рассматривать на примере нашего языка Avenue);\n\t2) Скомпилировать. Языки программирования делятся на компилируемые и интерпретируемые. Компилятор превращает код, написанный вами, в машинный код, чтобы компьютер понимал его, и запускает этот код. Интерпретатор же в свою очередь компилирует код в процессе работы программы. Язык, на котором мы будем писать код, является интерпретируемым;\n\t3) Запустить программу на выполнение.</code>\nПрежде всего, главный инструмент разработчика — это среда разработки. Обычно среда разработки содержит несколько компонентов.\n<code>\t1) Компилятор.\n\t2) Средства запуска.\n\t3) Отладчик. Это инструмент, помогающий программисту разобраться, почему программа работает не так, как было задумано.</code>",
            "В этой теме мы напишем нашу первую программу. Вы можете открыть редактор кода через Меню. Меню => Редактор. Меню можно открыть на главной странице, просто проведя пальцем слева направо.\nТакже можно провести пальцем справа налево в уроке. Перед вами откроется редактор кода.\n\nДля вывода результата программы существует команда print\nДавайте напишем нашу первую программу, которая выводит \"Привет, Мир!\".\n\nКод программы будет выглядеть так:\n<code>\tprint \"Привет, Мир!\"</code>\nПосле запуска программа выведет \"Привет, Мир!\".\n\nВместо фразы \"Привет, Мир!\" можно поставить любую другую. Например, \"Теперь я программист!\".\nВ этом случае код будет выглядеть так:\n<code>\tprint \"Теперь я программист!\"</code>",
            "Для того, чтобы сохранить некоторые данные, используют переменные.\nЧто же такое переменная? Переменная - область памяти, используемая для хранения информации, обрабатываемой компьютером. Переменная имеет имя, тип и значение (информацию).\nВ языке Avenue тип переменной определяется автоматически.\nТип переменной может быть числовой и строковый.\n\nЧисла могут быть целыми и дробными. В языке Avenue поддерживаются только дробные числа. Например: 1.0, 2.5.\n\nК строковому типу данных относится текст. Текст принято писать в ковычках.\n\nДавайте попрактикуемся:\n<code>\t4.7 - числовой тип\n\t\"Hi\" - строковый тип</code>\nКак вы думаете, к какому типу данных относится \"4.7\"?\n\"4.7\" относится к строковому типу данных. НО вы можете понаблюдать кое-что интересное в арифметических действиях. Это мы рассмотрим в следующей теме.\n\nИтак, как же объявить переменную? В языке Avenue это делается так:\n<code>\t<имя переменной> = <значение></code>\nКонечно же, вместо <имя переменной> нужно написать название переменной и без фигурных скобок (< >), а вместо <значение> - информацию, которую будут хранить в этой переменной.\nВ имени переменной не может быть пробелов. Вместо пробелов можно использовать нижнее подчёркивание. Например, simple_variable.\n\nНа практике объявление переменных в языке Avenue выглядит так:\n<code>\tquote = \"Если человек умер, его нельзя перестать любить, черт возьми. Особенно если он был лучше всех живых, понимаешь?\"</code>\nЗдесь мы переменной quote присваиваем значение строкового типа (напомню, тип в языке Avenue определяется автоматически)\n\nУ уже существующих переменных можно изменить значение. Чтобы это сделать нужно просто указать имя переменной и через равно написать новое значение. Да, изменение информации существующей переменной делается так же, как и объявление новой переменной.\n\nКак использовать переменные? Получить значение переменной можно просто указав имя этой переменной.\nНа практике это выглядит так:\n<code>\tquote = \"Если человек умер, его нельзя перестать любить, черт возьми. Особенно если он был лучше всех живых, понимаешь?\"\n\tprint quote</code>\nВывод будет такой:\n<code>\tЕсли человек умер, его нельзя перестать любить, черт возьми. Особенно если он был лучше всех живых, понимаешь?</code>\nВы можете протестировать данный код. Как открыть редактор кода, написано в прошлой теме.",
            "В программировании есть арифметические операции. Это сложение (+), вычитание (-), умножение (*), деление (/).\nВ прошлой теме была затронута тема арифметических действий с числом в строковом типе данных (\"4.7\").\n\nИтак:\n<code>\t1) Из строки и строки получается строка\n\t2) Из числа и числа получается число\n\t3) Из строки и числа получается строка</code>\nДавайте немного отвлечёмся от нашей \"математики\" и узнаем кое-что новое.\nВ программировании код можно комментировать. Для этого надо написать двойной слэш, а дальше писать текст комментария.\nВыглядит это примерно так:\n<code>\t//\tЭто комментарий</code>\nКомментарии компилятор пропускает. То есть, что бы вы не написали в комментарии, это никак не повлияет на код.\nНапример: <code>\t// print \"Это не будет выведено\"</code>\nПри запуске этой программы ничего не будет выведено.\n\nТакие комментарии идут от // до конца строки.\n\nНо если комментарии состоят не только из одной строки? Неужели придётся для каждой строки писать двойной слэш?\nНет, для этого придуманы многострочные комментарии.\nНачало многострочного комментария - /*\nКонец многострочного комментария - */\n\nВсё, что находится внутри такого комментария, не будет считываться компилятором.\n\nТеперь в наших примерах код будет объясняться комментариями.\n\nМы немного отошли от рассматриваемой темы.\nИтак, вернёмся к арифметическим операциям.\nНа практике арифметические действия выглядят так:\n<code>\tprint 1+1\t\t//\tВывод: 2.0\n\tprint 2-1\t\t//\tВывод: 1.0\n\tprint 1-2\t\t//\tВывод: -1.0\n\tprint 1*3\t\t//\tВывод: 3.0\n\tprint 4/2\t\t//\tВывод: 2.0\n\tprint \"1\"+1\t//\tВывод: 11.0 (то есть 1 - это 1.0, а так как идёт сложение строки и числа, получается строка, значит \"1\" + \"1.0\"=\"11.0\")\n\tprint \"1\"-1\t//\tОШИБКА!\n\tprint \"1\"/1\t//\tОШИБКА!\n\tprint 4*\"1\"\t//\tВывод: 1111\n\tprint \"4\"*\"2\"\t//\tВывод: 44\n\tprint \"4\"+\"1\"\t//\tВывод: 41</code>\n\nСоветуем поэкспериментировать перед переходом к следующей теме.",
            "В программировании существует понятие функций.\nНередко в программе повторяются одни и те же процессы много раз. Чтобы облегчить работу и уменьшить объём кода, используют функции. Функция - это подпрограмма, которая вызывается в основной программе.\n\nКак определять свои функции мы узнаем позже. В этой теме будет рассказано о стандартных функциях, которые уже определены.\n\nИтак, это такие функции, как:\n<code>\tprintln() - вывод результата(отличие от print рассмотрим позже)\n\techo() - то же самое, что и println\n\tprintlns() - вывод результата по строкам(особенности рассмотрим тоже позже)\n\trandom() - любое случайное число\n\tsin() - синус\n\tcos() - косинус\n\tabs() - превращает полученный аргумент в положительное число</code>\nЧто такое аргумент и зачем нужны эти скобки в функциях? В скобках вы как раз передаёте аргументы. Аргументы(ещё называют параметры) - это данные, полученные во внешней части программы. Аргументы использует функция.\n\nИтак, давайте представим вызов переменной:\n<code>\t<имя функции>(<параметры>)</code>\nВ имени функции тоже не может быть пробелов.\nКоличество параметров может быть 0. Количество параметров зависит от того, сколько требует функция.\n\nВ функцию println() можно передать хоть сколько параметров. Отличие от обычного print в том, что эта функция перечисляет все аргументы через пробел.\nОсобенности функции printlns() в том, что она перечисляет все аргументы через новые строки. То есть, каждый аргумент - новая строка.\nОтличие echo() от println() только в том, что в конце перечисления не начинается новая строка. То есть в конце перечисления аргументов функция println() делает переход на новую строку.\n\nФункция random() не принимает никаких аргументов. Эта функция просто возвращает любое число.\n\nФункции sin() и cos() принимают только 1 аргумент(числового типа) и возвращают число.\nФункция abs() принимает 1 аргумент(число) и возвращает положительное число. То есть abs(-1) вернёт 1.\n\nСоветуем перед переходом к следующей теме протестировать эти функции."
        ],
        [	"К логическим операторам относятся:\n<code>\t>\tстрого больше\n\t<=\tменьше или равно\n\t<\tстрого меньше\n\t==\tравно\n\t>=\tбольше или равно\n\t!=\tне равно</code>\nДавайте объединим. Логическое выражение можно построить с помощью логических операторов. Логическое выражение выглядит так:\n<code>\t1 < 2 \t//\tИСТИНА\n\t4 > 7 \t//\tЛОЖЬ\n\t4 <= 4 \t//\tИСТИНА\n\t2 >= 5 \t//\tЛОЖЬ\n\t5 == 5 \t//\tИСТИНА\n\t5 != 5 \t//\tЛОЖЬ</code>\nВ логических выражениях можно использовать переменные.\n\nЛогические выражения можно объединять.\n\nВ письме в выражениях используют И, ИЛИ.\nТакое же есть и в программировании:\n<code>\tИ - это && (конъюнкция)\n\tРезультат ИСТИНА, если оба выражения ИСТИНА, в остальных случаях — ЛОЖЬ.\n\n\tИЛИ - это || (дизъюнкция)\n\tРезультат ЛОЖЬ, если оба выражения ЛОЖЬ, в остальных случаях — ИСТИНА.</code>\nНа практике это выглядит так:\n<code>\t(1 > 3) && (2 < 3)\t// ЛОЖЬ И ИСТИНА = ЛОЖЬ\n\t(1 == 1) && (5 > 2)\t// ИСТИНА И ИСТИНА = ИСТИНА\n\t(1 > 3) || (2 < 3)\t// ЛОЖЬ ИЛИ ИСТИНА = ИСТИНА\n\t(1 == 1) || (5 > 2)\t// ИСТИНА ИЛИ ИСТИНА = ИСТИНА</code>",
            "Логические выражения можно использовать с помощью условных операторов.\nК условным операторам относятся if, else.\n\nИтак, рассмотрим синтаксис:\n<code>\tif (<логическое выражение>) {\t// если ИСТИНА\n\t\t<команды>\n\t} else {\t\t\t// иначе\n\t\t<команды>\n\t}</code>\nА если нужна проверка нескольких выражений. Для этого есть else if. Вызов выглядит, как у if.\n\nДавайте, попрактикуемся:\n<code>\tif (1 > 2) {\t\t// если 1 больше 2\n\t\tprint \"Первый блок\"\n\t} else if (6 == 5) {\t// если 6 равен 5\n\t\tprint \"Второй блок\"\n\t} else {\t\t// в других случаях\n\t\tprint \"Третий блок\"\n\t}</code>\n\nБудет выведено:\n<code>\tТретий блок</code>",
            "Циклом называется последовательность операторов, которая выполняется несколько раз, пока выполняется (или не выполняется) определенное условие.\n\nСинтаксис цикла while выглядит так:\n<code>\twhile (<логическое выражение>) {\n\t\t<команды>\n\t}</code>\nЭти команды выполняются, пока выполняется условие (логическое выражение).\n\nНа практике использование while примерно такое:\n<code>\ti = 0\n\twhile (i < 5) {\n\t\tprintln(i)\n\t\ti = i+1\n\t}</code>\nБудет выведено:\n<code>\t0.0\n\t1.0\n\t2.0\n\t3.0\n\t4.0</code>\nЦикл do while похож на обычный while.\nАналогичная программа с использованием do while:\n<code>\ti = 0\n\tdo {\n\t\tprintln(i)\n\t\ti = i+1\n\t} while (i < 5)</code>\nСинтаксис цикла do while выглядит так:\n<code>\tdo {\n\t\t<команды>\n\t} while (<логическое выражение>)</code>",
            "Оператор break используют для выхода из цикла.\nА оператор continue используют для выхода из данной итерации.\nИтерация - это каждый шаг цикла. То есть каждый повтор.\n\nПопрактикуемся.\nОператор break:\n<code>\ti = 0\n\twhile (i < 5) {\n\t\ti = i+1\n\t\tif (i == 3) break\n\t\tprintln(i)\n\t}</code>\nБудет выведено:\n<code>\t1.0\n\t2.0</code>\nОператор continue:\n<code>\ti = 0\n\twhile (i < 5) {\n\t\ti = i+1\n\t\tif (i == 3) continue\n\t\tprintln(i)\n\t}</code>\nЗдесь будет выведено:\n<code>\t1.0\n\t2.0\n\t4.0\n\t5.0</code>",
            "Цикл for - это цикл, в котором некоторая переменная изменяет своё значение от заданного начального значения до конечного значения с некоторым шагом.\nПроще говоря, это цикл с счётчиком.\n\nСинтаксис:\n<code>\tfor <переменная> | <логическое выражение> | <изменение> {\n\t\t<команды>\n\t}</code>\nВместо <переменная> должно быть создание новой переменной.\nВместо <логическое выражение> нужно поставить условие.\nВместо <изменение> должно быть любое изменение данной переменной. Например, <переменная> = <переменная> + 1\n\nИтак, снова практика:\n<code>\tfor i=0 | i<5 | i=i+1 {\n\t\tprintln(i)\n\t}</code>\nБудет выведено:\n<code>\t0.0\n\t1.0\n\t2.0\n\t3.0\n\t4.0</code>\nВидно, что цикл for похож на цикл while.",
            "Массив — упорядоченный набор элементов, каждый из которых хранит одно значение.\nК любому элементу можно обратиться с помощью индекса.\n\nСоздание массива происходит так:\n<code>\t<переменная> = array()</code>\nТо есть типичное создание переменной, которой в значение передаём функцию array(). В аргументах функции array() можно передать любые значения через запятую.\nНапример:\n<code>\ta = array(1, \"Second\", 3, 4)</code>\nЧтобы получить значение нужного элемента, надо знать его индекс.\nИндекс - это число, которое показывает нахождение элемента, считая от 0.\n\nРассмотрим на прошлом примере:\n<code>\tprintln(a[0], a[3])</code>\nПрограмма выведет:\n<code>\t1.0 4.0</code>\nДля работы с массивами есть ряд функций:\n<code>\tappend(<массив>, <значения>) - добавляет новые значения в уже существующий массив\n\tget(<массив>, <индекс>) - возвращает значение данного элемента\n\tlength(<массив>) - возвращает размер массива</code>",
            "Свою функцию можно создать с помощью команды def.\n\nСинтаксис выглядит так:\n<code>\tdef <название функции> (<аргументы>) {\n\t\t<команды>\n\t}</code>\nВместо <аргументы> можно указать аргументы через запятую.\n\nПользовательские функции можно вызывать, как уже существующие.\nДавайте напишем функцию, которая выводит то, что ей передали в аргументы:\n<code>\tdef function (arg) {\n\t\tprint arg\n\t} // создали функцию с одним аргументом\n\tfunction(\"Это написала функция!\") // вызываем функцию</code>\nБудет выведено:\n<code>\tЭто написала функция!</code>\nНо ведь некоторые функции возвращают какие-то значения. Например, функция random() возвращает случайное число.\nДля того, чтобы вернуть какое-либо значение используют return.\n\nСинтаксис очень прост:\n<code>\treturn <значение></code>\nПосле того, как сработает return, происходит выход из функции. То есть функционал похож на break, но ещё будет возвращено какое-то значение.\n\nДавайе сделаем функцию из прошлого примера, но с использованием return:\n<code>\tdef function (arg) {\n\t\treturn arg // возвращаем полученный arg\n\t}\n\tprint function(\"Это написала функция!\") // выводим ответ функции</code>"
        ],
        [   "В июле 1961 года американский ученый Л. Клейнрок опубликовал первую статью по теории пакетной коммутации. Он предложил передавать данные через сети. Для этого он предложил разделить их на небольшие пакеты в несколько десятков байт и потом в адресате из них собрать исходное сообщение. Уже в 1969 году коллектив ученых под его руководством в Калифорнийском университете и ученые Стэнфордского исследовательского института впервые продемонстрировали передачу данных с использованием набора сетевых протоколов TCP (Transmission Control Protocol). Пакет данных прошел по маршруту Сан-Франциско — Лондон — Университет Южной Калифорнии, при этом не потеряв ни одного бита. Этот день, 29 октября 1969 года, многие историки считают днем рождения интернета.\n\nИнтернет-протокол — это набор правил, по которым компьютеры взаимодействуют между собой. Без протоколов не было бы интернета, потому что устройства в сети не понимали бы друг друга.\n\nВ 1978 году TCP был разделен на две отдельные группы:\n<code>\tЗа разбивку передаваемого сообщения на пакеты данных и их сборку в пункте получения стал отвечать TCP;\n\tЗа передачу пакетов данных с контролем получения — IP-протокол (Internet Protocol).</code>\nПо отношению к протоколам TCP/IP употребляют понятие «стек протоколов». Так происходит потому, что сейчас это уже большое множество протоколов, которые «слоями» покрывают друг друга: верхние работают на высоком логическом уровне, не вдаваясь в подробности, которые задают протоколы более низкого уровня. Сейчас в стеке протоколов TCP/IP по одной из классификаций выделяют четыре уровня:\n<code>\tПрикладной уровень. Самый верхний прикладной уровень. Здесь работают протокол HTTP для WWW, FTP (передача файлов), SMTP (электронная почта), DNS (преобразование символьных имен в IP-адреса) и многие другие.\n\n\tТранспортный уровень. Протоколы транспортного уровня TCP, UDP решают задачу передачи пакетов данных и определяют, для какого конкретно приложения они предназначены.\n\n\tСетевой уровень. IP-протоколы сетевого уровня занимаются определением кратчайшего пути передачи пакетов данных, переводом логических адресов и имен в физические и др. На данном уровне работает сетевое устройство — маршрутизатор.\n\n\tКанальный уровень. Самый приближенный к физическим устройствам канальный уровень протоколов. Он предназначен для решения задачи передачи данных узлам, находящимся в том же сегменте локальной сети. Одним из примеров такого протокола является Ethernet.</code>",
            "Для работы с протоколами TCP/IP используют три типа адресов:\n<code>\tMAC-адрес (физический адрес)\n\tIP-адрес (сетевой адрес)\n\tDNS-имя (символьное доменное имя)</code>\nMAC-адрес (от Media Access Control) — это уникальный идентификатор, присваиваемый каждой единице активного оборудования, или некоторым их интерфейсам в компьютерных сетях Ethernet.\nMAC-адрес — это шестибайтный номер. Обычно он записывается в шестнадцатиричной системе счисления, например, следующим образом: E1:39:F5:7A:E2:22.\n\nIP-адрес (от Internet Protocol Address) — представляет собой основной тип адресов, с помощью которых происходит обмен пакетами на сетевом уровне. Такие адреса состоят из 4 байт и записываются четырьмя десятичными числами от 0 до 255, разделенными точками, например, 192.168.0.1. IP-адрес назначается администратором во время конфигурации компьютеров и маршрутизаторов.\n\nDNS-имя (Domain Name System) — символьный имя-идентификатор, такой как, например, vk.com. Доменное имя представляет собой буквенные адреса. Они гораздо удобнее для восприятия и использования, чем последовательность цифр IP-адреса.",
            "В этой теме мы напишем небольшой сервер на PHP.\n\nPHP - это скриптовый язык общего назначения, интенсивно применяемый для разработки веб-приложений.\nДавайте напишем приложение на php, которое выводит \"Привет, Мир!\".\n\nКод для PHP записывают в файлы с расширением .php\nКомпилятор считывает PHP-код только в таких блоках:\n<code>\t<?php\n\t\t// здесь код\n\t?></code>\nДля вывода в PHP есть команда echo:\n<code>\techo <значение></code>\nНаша программа будет выглядеть так:\n<code>\t<?php\n\t\techo \"Привет,  Мир!\";\n\t?></code>\nВ PHP после каждой команды идёт символ ;\n\nДавайте сразу узнаем про переменные в PHP.\nДля того, чтобы объявить, что это переменная, перед именем переменной нужно указать знак $.\nНебольшая программа с использованием переменных:\n<code>\t<?php\n\t\t$hello = \"Привет, Мир!\";\n\t\techo $hello;\n\t?></code>\nКомментарии в PHP такие же, как и в Avenue.",
            "В PHP функции объявляются также легко.\n\nСинтаксис при создании функции:\n<code>\t<?php\n\t\tfunction <название функции> (<аргументы>) {\n\t\t\t<команды>\n\t\t}\n\t?></code>\nПосле скобок символ ; не ставится.\nПопробуем снова сделать программу, но уже с использованием функций:\n<code>\t<?php\n\t\tfunction hello() {\n\t\t\techo \"Привет, Мир!\";\n\t\t}\n\t\thello();\n\t?></code>\nПрограмма конечно же выведет:\n<code>\tПривет, Мир!</code>\nА теперь узнаем, как запустить PHP-код и увидеть результат.",
            "Сначала установим PHP (установка в Windows):\n<code>\t1. Скачиваем с официального сайта нужную нам версию: http://windows.php.net/download/\n\t2. Распаковываем в удобную директорию(папку)\n\t3. Кликаем на кнопке \"мой компьютер\" правой кнопкой мыши – выбираем \"свойства\" - \"дополнительные параметры системы\" - \"дополнительно\" - \"переменные среды\" - переменная \"path\"\n\t4. В значениях этой переменной перечислены пути разделенные ; - добавляем путь к папке с нашим PHP.\n\t5. Теперь в командной строке windows доступна команда php.</code>\nЧтобы запустить сервер, надо в какой-нибудь папке создать файл index.php и в него записать прошлый код:\n<code>\t<?php\n\t\tfunction hello() {\n\t\t\techo \"Привет, Мир!\";\n\t\t}\n\t\thello();\n\t?></code>\nТеперь откроем эту папку. С зажатой клавишей Shift надо щёлкнуть правой кнопкой мыши. В открывшемся меню выбираем пункт, похожий на такой \"Открыть окно команд\".\n\nОткроется терминал в данной папке. Теперь осталось ввести команду:\n<code>\tphp -S localhost:80</code>\nСервер запущен. Теперь откроем в браузере:\n<code>\tlocalhost:80</code>\nМожно и:\n<code>\tlocalhost:80/index.php</code>\nВот и готов наш небольшой сервер."
        ]
    ]
}
